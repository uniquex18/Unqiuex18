import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToGenerativePart = (base64: string) => {
    // Expected format: "data:image/jpeg;base64,..."
    const parts = base64.split(';base64,');
    if (parts.length !== 2) {
        throw new Error('Invalid base64 string format');
    }
    const mimeType = parts[0].split(':')[1];
    const data = parts[1];
    
    return {
        inlineData: {
            mimeType,
            data,
        },
    };
};

const callGeminiWithImage = async (prompt: string, imagePart: any) => {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [
                { text: prompt },
                imagePart
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    const firstPart = response.candidates?.[0]?.content?.parts?.[0];
    if (firstPart && firstPart.inlineData) {
        const { data, mimeType } = firstPart.inlineData;
        return `data:${mimeType};base64,${data}`;
    }
    throw new Error("No image was generated by the API. The result might have been blocked due to safety policies.");
};

export async function generateFullBodyImage(
  photoBase64: string
): Promise<string> {
    
    const photoPart = fileToGenerativePart(photoBase64);
    
    const fullBodyPrompt = `Take this half-body or cropped photo. First, enhance its quality to be sharp, clear, and high-resolution. Then, generate a complete, photorealistic, full-body image of the person. The generated parts (legs, arms, clothing, etc.) must perfectly match the existing photo in terms of body proportions, skin tone, and style. The background should be seamlessly extended, maintaining the original lighting, shadows, and textures. The final result should look like a single, professionally taken, unedited photograph.`;
    
    const resultImage = await callGeminiWithImage(fullBodyPrompt, photoPart);
    
    return resultImage;
}